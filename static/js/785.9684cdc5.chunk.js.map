{"version":3,"file":"static/js/785.9684cdc5.chunk.js","mappings":"sSAAMA,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,uFACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,gCAGYD,EAASE,OAHrB,+CAIMC,QAAQC,OAAO,IAAIC,MAAML,EAASM,SAJxC,0GAOO,SAASC,EAAoBC,GAClC,OAAOX,EAAU,GAAD,OACXF,EADW,wCAC6BC,EAD7B,iBAC6CY,IAIxD,SAASC,EAAgBC,GAC9B,OAAOb,EAAU,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,oBAAoCd,IAG/C,SAASe,EAAmBC,EAAOJ,GACxC,OAAOX,EAAU,GAAD,OACXF,EADW,iCACsBC,EADtB,kBACuCgB,EADvC,iBACqDJ,IAIhE,SAASK,EAAaH,GAC3B,OAAOb,EAAU,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAA4Cd,IAGvD,SAASkB,EAAaJ,GAC3B,OAAOb,EAAU,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAA4Cd,M,yGC9B9D,EAA2B,uBAA3B,EAAyD,mBAAzD,EAAuF,uBAAvF,EAAoH,kBAApH,EAA6I,mBAA7I,EAA4K,wB,SCqC5K,EAjCa,WACX,OAA4BmB,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAUC,EAAAA,EAAAA,MAMhB,OAJAC,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAaK,GAASG,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcL,EAAUK,QAClD,CAACJ,IAGFF,IACE,gBAAKO,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SACGR,EAAOS,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACvC,OACEA,IACE,gBAAkBN,UAAWC,EAA7B,WACE,gBACED,UAAWC,EACXM,IAAG,yCAAoCD,GACvCE,IAAKH,KAEP,kBAAML,UAAWC,EAAjB,UAA0BI,EAA1B,UACA,kBAAML,UAAWC,EAAjB,cAAgCG,EAAhC,SAPOD","sources":["services/API.js","webpack://goit-react-hw-05-movies/./src/views/Cast/Cast.module.scss?8481","views/Cast/Cast.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '33bcb89e36b34d36b896a35a11214f25';\n\nasync function getMovies(url) {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(response.status));\n}\n\nexport function fetchTrendingMovies(page) {\n  return getMovies(\n    `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=${page}`\n  );\n}\n\nexport function fetchMoviesByID(id) {\n  return getMovies(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n}\n\nexport function fetchMoviesByQuery(query, page) {\n  return getMovies(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n}\n\nexport function fetchCredits(id) {\n  return getMovies(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n}\n\nexport function fetchReviews(id) {\n  return getMovies(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapList\":\"Cast_wrapList__Bf0aW\",\"list\":\"Cast_list__eALS7\",\"listItem\":\"Cast_listItem__X2bKc\",\"img\":\"Cast_img__9+Dsf\",\"name\":\"Cast_name__r4LsE\",\"character\":\"Cast_character__Sig32\"};","import { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { fetchCredits } from 'services/API';\nimport s from './Cast.module.scss';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const movieId = useOutletContext();\n\n  useEffect(() => {\n    fetchCredits(movieId).then(({ cast }) => setActors(cast));\n  }, [movieId]);\n\n  return (\n    actors && (\n      <div className={s.wrapList}>\n        <ul className={s.list}>\n          {actors.map(({ cast_id, character, name, profile_path }) => {\n            return (\n              profile_path && (\n                <li key={cast_id} className={s.listItem}>\n                  <img\n                    className={s.img}\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={name}\n                  />\n                  <span className={s.name}>{name} - </span>\n                  <span className={s.character}>({character})</span>\n                </li>\n              )\n            );\n          })}\n        </ul>\n      </div>\n    )\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","getMovies","url","fetch","response","ok","json","Promise","reject","Error","status","fetchTrendingMovies","page","fetchMoviesByID","id","fetchMoviesByQuery","query","fetchCredits","fetchReviews","useState","actors","setActors","movieId","useOutletContext","useEffect","then","cast","className","s","map","cast_id","character","name","profile_path","src","alt"],"sourceRoot":""}